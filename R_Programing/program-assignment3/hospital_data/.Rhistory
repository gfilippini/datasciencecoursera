## renames the column names
colnames(out)<-c("Hospital.Name","State","Heart_Attack","Heart_Failure","Pneumonia")
## output the file
outcome
}
out<-read_outcome()
head(ou)
head(out)
read_outcome <- function() {
## reads csv outcome mesures
## the file outcome-of-care-measures.csv must be on working directory
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## keeps the columns of interest
outcome <-outcome[,c(2,7,11,17,23)]
## converts the variables to numeric
outcome[,3]<-as.numeric(outcome[,3])
outcome[,4]<-as.numeric(outcome[,4])
outcome[,5]<-as.numeric(outcome[,5])
## renames the column names
colnames(outcome)<-c("Hospital.Name","State","Heart_Attack","Heart_Failure",
"Pneumonia")
## output the file
outcome
}
out<-read_outcome()
head(out)
n_out<-out["State"=="TX"]
head(n_out)
n_out<-out["State"=="TX",]
head(n_out)
n_out<-out[["State"=="TX",]]
n_out<-out[out["State"]=="TX",]
head(n_out)
n_out<-out[out["State"]=="TX",]
new_out<-nout[order(Heart_Attack,Hospital.Name),]
new_out<-n_out[order(Heart_Attack,Hospital.Name),]
new_out<-n_out[order("Heart_Attack","Hospital.Name"),]
head(new_out)
new_out<-n_out[order("Heart_Failure","Hospital.Name"),]
head(new_out)
new_out<-n_out[order("Pnewmonia","Hospital.Name"),]
head(new_out)
head(n_out)
new_out<-n_out[order(n_out["Pnewmonia"],n_out["Hospital.Name"]),]
new_out<-n_out[order(n_out["Pnemonia"],n_out["Hospital.Name"]),]
new_out<-n_out[order(n_out["Pneumonia"],n_out["Hospital.Name"]),]
head(new_out)
head(new_out,1)
head(new_out["Hospital.Name"],1)
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["STATE"]==state]
n_out
}
n_out<-first_hospital(out,,)
names(out)
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state]
n_out
}
n_out<-first_hospital(out,,)
n_out<-first_hospital(out,TX,)
n_out<-first_hospital(out,'TX',)
head(n_out)
head(out)
head(n_out)
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state,]
n_out
}
n_out<-first_hospital(out,'TX',)
head(n_out)
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state,]
## selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],"Hospital.Name"),]
n_out
}
n_out<-first_hospital(out,'TX',"Heart_Failure")
n_out<-first_hospital(out,'TX','Heart_Failure')
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state,]
## selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name")],]
n_out
}
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state,]
## selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name")],]
n_out
}
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state,]
## selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
n_out
}
n_out<-first_hospital(out,'TX','Heart_Failure')
head(n_out)
n_out<-first_hospital(out,'TX','Pneumonia')
head(n_out)
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state,]
## selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
return(n_out["Hospital.Name"])
}
n_out<-first_hospital(out,'TX','Pneumonia')
first_hospital(out,'TX','Pneumonia')
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state,]
## selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
return(n_out[1,"Hospital.Name"])
}
first_hospital(out,'TX','Pneumonia')
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
names(outcome)
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state,]
## selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
##  return(n_out[1,"Hospital.Name"])
}
n_out<-first_hospital(out,'TX','Pneumonia')
head(n_out)
first_hospital <- function(data,state=NULL,outcome=NULL) {
## selects the state to be analysed
n_out <- data[data["State"]==state,]
## selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
return(n_out[1,"Hospital.Name"])
}
first_hospital(out,'TX','Pneumonia')
first_hospital(out,'TX','Heart_Failure')
first_hospital(out,'TX','Heart_Attack')
txt=['find matches of a string in a vector of strings'
'search position of a character string in an other string'
'Compare Strings'];
grep(txt,'strings')
txt='find matches of a string in a vector of strings'
'search position of a character string in an other string'
'Compare Strings'
grep(txt,'strings')
grep(txt,'string')
c('heart attack', 'pneumonia','heart failure')
c('heart attack', 'pneumonia','heart failure')=='hart attack'
c('heart attack', 'pneumonia','heart failure')=='heart attack'
if(c('heart attack', 'pneumonia','heart failure')=='heart attack')
1 else 0
if(c('heart attack', 'pneumonia','heart failure')=='pneumonia')
1 else 0
c('heart attack', 'pneumonia','heart failure')->x
x=="penumonia"
x=="peneumonia"
x=="pneumonia"
x[x='pneumonia']
x[x=='pneumonia']
x[x=='pneumoni']
[x=='pneumonia']
x=='pneumonia'
if x=='pneumonia'
if (x=='pneumonia')
1 else 0
?is.true
istrue(x=='pneumonia')
isTRUE(x=='pneumonia')
isTRUE(x[x=='pneumonia'])
x[x=='pneumonia']
isTRUE(x[x=='pneumonia']='pneumonia')
isTRUE(x[x=='pneumonia']=='pneumonia')
validate_args <- function(state,outcome){
valid_outcomes<-c('pneumonia','heart attack','heart failure')
isTRUE(valid_outcomes[valid_outcomes==outcome]==outcome)
}
validate_args(state,'pneu')
validate_args(state,'pneumonia')
validate_args(state,'hart attack')
validate_args(state,'heart attack')
val_s<-data["State"]
val_s<-out["State"]
head(val_s
)
val_s<-unique(out["State"])
head(val_s)
val_s[2]
val_s[2,]
val_s[3,]
val_s[10,]
validate_args <- function(data,state,outcome){
valid_outcomes<-c('pneumonia','heart attack','heart failure')
valid_states<-unique(data["State"])
##  isTRUE(valid_outcomes[valid_outcomes==outcome]==outcome)
isTRUE(valid_states[valid_states==state]==state)
}
validate_args(out,'FL','heart attack')
validate_args(out,'DD','heart attack')
validate_args <- function(data,state,outcome){
valid_outcomes<-c('pneumonia','heart attack','heart failure')
valid_states<-unique(data["State"])
isTRUE(valid_outcomes[valid_outcomes==outcome]==outcome)
isTRUE(valid_states[valid_states==state]==state)
}
validate_args(out,'FL','heart attack')
validate_args(out,'DD','heart attack')
validate_args(out,'FL','hart attack')
validate_args <- function(data,state,outcome){
valid_outcomes<-c('pneumonia','heart attack','heart failure')
valid_states<-unique(data["State"])
if (!isTRUE(valid_outcomes[valid_outcomes==outcome]==outcome)) {
stop("invalid otcome")
}
if (!isTRUE(valid_states[valid_states==state]==state)) {
stop("invalid state")
}
}
validate_args(out,'FL','hart attack')
validate_args(out,'DD','heart attack')
validate_args(out,'FL','heart attack')
best <- function(state,outcome){
## read outcome data
data<-read_outcome()
## check that state and outcome are valid
## return hospital name in that state with lowest 30-day death rate
}
out<-best()
head(out)
best <- function(state,outcome){
## read outcome data
data<-read_outcome()
## check that state and outcome are valid
## return hospital name in that state with lowest 30-day death rate
first_hospital(data,state,outcome)
}
best("TX","heart attack")
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/best-prototype.R')
best("TX","heart attack")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## keeps the columns of interest
outcome <-outcome[,c(2,7,11,17,23)]
## converts the variables to numeric
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## keeps the columns of interest
outcome <-outcome[,c(2,7,11,17,23)]
## converts the variables to numeric
outcome[,3]<-supressWarnings(as.numeric(outcome[,3]))
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## keeps the columns of interest
outcome <-outcome[,c(2,7,11,17,23)]
## converts the variables to numeric
outcome[,3]<-suppressWarnings(as.numeric(outcome[,3]))
head(outcome)
source('~/.active-rstudio-document')
best("TX","heart failure")
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/best-prototype.R')
best("TX","heart failure")
best("MD","heart attack")
best("MD","pneumonia")
best("BB","heart attack")
best("NY","hert attack")
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/best-prototype.R')
best("BB","heart attack")
best("NY","hert attack")
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/rankhospital-prototype.R')
out<-read_outcome()
out<-hospitalrank(out,"TX","heart attack")
head(out)
out<-hospitalrank(out,"TX","heart failure")
head(out)
out[4,1]
out<-read_outcome()
n_out<-hospitalrank(out,"MD","heart attack")
tail(n_out)
last(n_out)
n_out[5000,1]
head(out)
head(out[,1])
head(out[,3])
head(!is.na(out[,3]))
head(out[!is.na(out[,3])])
head(out[,!is.na(out[,3])])
is.na(out[,3])
head(!is.na(out[,3]))
head(out==!is.na(out[,3]))
head(out[,3]==!is.na(out[,3]))
head(out[!is.na(out[,3])])
head(out[!is.na(out[,3]),])
head(out[!is.na(out[,4]),])
head(out[!is.na(out[,3]),])
head(out[!is.na(out[,3]),],10)
head(out,10)
head(out[!is.na(out[,4]),],10)
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/rankhospital-prototype.R')
n_out<-hospitalrank(out,"AL","heart attack")
head(n_out,10)
n_out <- n_out[!is.na(out[,3]),]
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/rankhospital-prototype.R')
n_out<-hospitalrank(out,"TX","heart attack")
head(n_out)
tail(n_out)
hospitalrank<-function(data,state,outcome){
## selects the state to be analysed
n_out <- data[data["State"]==state,]
## removes NA for an outcome
n_out <- n_out[!is.na(n_out[,3]),]
## selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
}
n_out<-hospitalrank(out,"TX","heart attack")
tail(n_out)
n_out<-hospitalrank(out,"MD","heart attack")
tail(n_out)
[6,tail(n_out)]
tail(n_out,6)
tail(n_out,1)
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/rankhospital-prototype.R')
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/rankhospital-prototype.R')
rankhospital("BB","heart attack")
rankhospital("TX","hert attack")
rankhospital("TX","heart attack")
rankhospital("TX","heart attack",5000)
rankhospital("TX","heart failure",4)
rankhospital("MD","heart attack","worst")
rankhospital("MN","heart attack",5000)
rankstate<-function(data){
## splits the dataframe by state
split_data<-split(data,data["state"])
## for each split, brings the ranked hospital on the position using the hospitalrank
## function
}
head(out)
rankstate<-function(data){
## splits the dataframe by state
split_data<-split(data,data["state"])
## for each split, brings the ranked hospital on the position using the hospitalrank
## function
}
n_o<-rankstate(out)
rankstate<-function(data){
## splits the dataframe by state
split_data<-split(data,data[,"state"])
## for each split, brings the ranked hospital on the position using the hospitalrank
## function
}
n_o<-rankstate(out)
rankstate<-function(data){
## splits the dataframe by state
split_data<-split(data,data["state"],)
## for each split, brings the ranked hospital on the position using the hospitalrank
## function
}
n_o<-rankstate(out)
rankstate<-function(data){
## splits the dataframe by state
split_data<-split(data,data[,"state"])
## for each split, brings the ranked hospital on the position using the hospitalrank
## function
}
n_o<-rankstate(out)
names(out)
rankstate<-function(data){
## splits the dataframe by state
split_data<-split(data,data["State"])
## for each split, brings the ranked hospital on the position using the hospitalrank
## function
}
n_o<-rankstate(out)
head(n_o)
head(n_o)
head(n_o,1)
rankstate<-function(data,state,outcome){
## splits the dataframe by state
split_data<-split(data,data["State"])
## for each split, brings the ranked hospital on the position using the hospitalrank
## function
t<-lapply(split_data,hospitalrank(data,state,outcome))
}
n_o<-rankstate(out,,"heart attack")
n_o<-rankstate(out,"TX","heart attack")
s<-split(out,out["State"])
t<-lapply(split_data,function(hospitalrank(data,state,outcome) )
t<-lapply(split_data,function(hospitalrank(data,state,outcome) ))
t<-lapply(split_data,function(hospitalrank) )
t<-lapply(split_data,function(hospitalrank()) )
a<-hospitalrank(out,c("TX","MD"),"heart attack")
head(a)
t<-lapply(s,function(hospitalrank(data,state,outcome) )
a<-hospitalrank(s,c("TX","MD"),"heart attack")
a<-hospitalrank(s,,"heart attack")
a<-hospitalrank(s,"TX","heart attack")
hospitalrank<-function(data,outcome){
## removes NA for an outcome
n_out <- n_out[!is.na(n_out[,3]),]
## order and selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
}
a<-hospitalrank(s,heart attack")
a<-hospitalrank(s,"heart attack")
head(a,1)
head(a)
head(s)
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/rankhospital.R')
rankhospital("TX","pneumonia",10)
hospitalrank<-function(data,outcome){
## removes NA for an outcome
n_out <- n_out[!is.na(n_out[,outcome]),]
## order and selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
}
o<-hospitalrank("MD","heart failure")
head(o)
o<-hospitalrank(out,"heart failure")
head(o)
head(out)
o<-hospitalrank(out,"heart attack")
head(out)
head(o)
o<-hospitalrank(out,"pneumonia")
head(o)
out<-read_outcome()
o<-hospitalrank(out,"pneumonia")
head(o)
hospitalrank<-function(data,outcome){
## removes NA for an outcome
n_out <- n_out[!is.na(n_out[,outcome]),]
## order and selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
}
o<-hospitalrank(out,"pneumonia")
head(o)
n_out <- n_out[!is.na(out[,"pneumonia"]),]
head(n_out)
n_out <- n_out[!is.na(out[,"heart attack"]),]
head(n_out)
source('C:/Users/Giuliano/datasciencecoursera/R_Programing/program-assignment3/rankall-prototype.R')
source('~/.active-rstudio-document')
read_outcome <- function() {
## reads csv outcome mesures
## the file outcome-of-care-measures.csv must be on working directory
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character")
## keeps the columns of interest
outcome <-outcome[,c(2,7,11,17,23)]
## converts the variables to numeric
outcome[,3]<-suppressWarnings(as.numeric(outcome[,3]))
outcome[,4]<-suppressWarnings(as.numeric(outcome[,4]))
outcome[,5]<-suppressWarnings(as.numeric(outcome[,5]))
## renames the column names
colnames(outcome)<-c("Hospital.Name","State","heart attack","heart failure",
"pneumonia")
## output the file
outcome
}
out<-read_outcome()
s<-split(out,out["State"])
t<-lapply(s,function(x,outcome) hospitalrank(x,"heart attack"))
t<-lapply(s,function(s,outcome) hospitalrank(s,"heart attack"))
t<-lapply(s,function(data,outcome) hospitalrank(data,"heart attack"))
?mapply
t<-mapply(hospitalrank,s)
t<-mapply(hospitalrank,data=s outcome="heart attack")
t<-mapply(hospitalrank,data=s, outcome="heart attack")
hospitalrank<-function(data,outcome){
## removes NA for an outcome
n_out <- n_out[!is.na(data[,outcome]),]
## order and selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
}
t<-mapply(hospitalrank,data=s, outcome="heart attack")
hospitalrank<-function(data,outcome){
## removes NA for an outcome
n_out <- data[!is.na(data[,outcome]),]
## order and selects the outcome to be analysed
n_out <- n_out[order(n_out[outcome],n_out["Hospital.Name"]),]
}
t<-mapply(hospitalrank,data=s, outcome="heart attack")
head(t)
t<-mapply(hospitalrank,s,data=s outcome="heart attack")
t<-mapply(hospitalrank,s,data=s, outcome="heart attack")
t<-mapply(hospitalrank,s)
t<-mapply(hospitalrank)
t<-hospitalrank(s,"heart attack")
t<-lapply(hospitalrank(s,"heart attack"))
t<-lapply(s,hospitalrank(s,"heart attack"))
t<-lapply(s,hospitalrank())
?lapply
t<-lapply(s,hospitalrank(x))
t<-lapply(s,hospitalrank(s,"heart attack")
)
t<-lapply(s,hospitalrank(data,outcome),data=s outcome="heart attack")
t<-lapply(s,hospitalrank(data,outcome),data=s outcome=heart attack)
o<-hospitalrank(out,"heart attack")
head(o)
o<-hospitalrank(out,"hear failure")
o<-hospitalrank(out,"heart failure")
head(o)
t<-lapply(s,hospitalrank)
t<-lapply(s,hospitalrank "heart failure")
t<-lapply(s,hospitalrank )
s["heart failure"]
s["heart failure",1]
s["heart failure",]
s[,"heart failure"]
